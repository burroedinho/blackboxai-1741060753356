"""
Motor de Auto-Evolu√ß√£o - Sistema que reescreve seu pr√≥prio c√≥digo
Usa LLM local (Ollama) para gerar varia√ß√µes e melhorar performance
"""

import os
import json
import time
import shutil
import subprocess
from datetime import datetime
from typing import Dict, List, Optional
import yaml
import ast
import autopep8
from loguru import logger


class SelfEvolutionEngine:
    """
    Motor revolucion√°rio que permite ao sistema evoluir autonomamente
    Analisa performance e gera novas vers√µes do c√≥digo usando IA
    """
    
    def __init__(self, config_path: str = "config.yaml"):
        with open(config_path, 'r') as f:
            self.config = yaml.safe_load(f)
        
        self.evolution_config = self.config['self_evolution']
        self.versions_dir = "evolved_versions"
        self.current_version = self.config['system']['version']
        self.performance_history = []
        
        logger.info("üß¨ Self Evolution Engine inicializado")
        
    def evaluate_performance(self, metrics: Dict) -> bool:
        """
        Avalia se a performance atual est√° abaixo do threshold
        
        Args:
            metrics: Dicion√°rio com m√©tricas (accuracy, profit_factor, drawdown, etc)
            
        Returns:
            True se precisa evoluir, False caso contr√°rio
        """
        accuracy = metrics.get('accuracy', 0)
        profit_factor = metrics.get('profit_factor', 0)
        drawdown = metrics.get('max_drawdown', 1)
        
        needs_evolution = (
            accuracy < self.evolution_config['min_accuracy_threshold'] or
            profit_factor < self.evolution_config['min_profit_factor'] or
            drawdown > self.evolution_config['max_drawdown']
        )
        
        self.performance_history.append({
            'timestamp': datetime.now().isoformat(),
            'metrics': metrics,
            'needs_evolution': needs_evolution
        })
        
        if needs_evolution:
            logger.warning(f"‚ö†Ô∏è Performance abaixo do esperado: {metrics}")
            logger.info("üîÑ Iniciando processo de auto-evolu√ß√£o...")
        
        return needs_evolution
    
    def generate_code_variations(self, target_file: str, num_variations: int = 5) -> List[str]:
        """
        Gera varia√ß√µes do c√≥digo usando LLM local (Ollama)
        
        Args:
            target_file: Arquivo Python a ser evolu√≠do
            num_variations: N√∫mero de varia√ß√µes a gerar
            
        Returns:
            Lista de caminhos para os arquivos gerados
        """
        logger.info(f"ü§ñ Gerando {num_variations} varia√ß√µes de {target_file}")
        
        with open(target_file, 'r') as f:
            original_code = f.read()
        
        variations = []
        
        for i in range(num_variations):
            prompt = self._create_evolution_prompt(original_code, i)
            
            try:
                # Chama Ollama para gerar c√≥digo melhorado
                new_code = self._call_ollama_for_code(prompt)
                
                # Valida sintaxe
                if self._validate_python_syntax(new_code):
                    # Formata c√≥digo
                    formatted_code = autopep8.fix_code(new_code)
                    
                    # Salva varia√ß√£o
                    variation_path = self._save_variation(formatted_code, i)
                    variations.append(variation_path)
                    logger.success(f"‚úÖ Varia√ß√£o {i+1} gerada com sucesso")
                else:
                    logger.error(f"‚ùå Varia√ß√£o {i+1} com erro de sintaxe")
                    
            except Exception as e:
                logger.error(f"Erro ao gerar varia√ß√£o {i+1}: {e}")
        
        return variations
    
    def _create_evolution_prompt(self, code: str, variation_num: int) -> str:
        """Cria prompt para o LLM gerar c√≥digo melhorado"""
        
        strategies = [
            "Otimize a l√≥gica de detec√ß√£o de sentimento nas velas, focando em padr√µes de medo e gan√¢ncia",
            "Melhore o sistema de gest√£o de risco com stop loss din√¢mico baseado em volatilidade",
            "Adicione camadas de aten√ß√£o temporal para capturar melhor as tend√™ncias de curto prazo",
            "Implemente ensemble de modelos para decis√µes mais robustas",
            "Otimize o uso de GPU com opera√ß√µes vetorizadas e batch processing"
        ]
        
        strategy = strategies[variation_num % len(strategies)]
        
        prompt = f"""Voc√™ √© um especialista em trading algor√≠tmico e deep learning.

C√ìDIGO ATUAL:
```python
{code}
```

TAREFA: {strategy}

REQUISITOS:
1. Mantenha a estrutura de classes e m√©todos principais
2. Melhore a acur√°cia e lucratividade
3. C√≥digo deve ser v√°lido Python 3.10+
4. Use apenas bibliotecas j√° importadas
5. Adicione coment√°rios explicativos

Retorne APENAS o c√≥digo Python melhorado, sem explica√ß√µes adicionais.
"""
        return prompt
    
    def _call_ollama_for_code(self, prompt: str) -> str:
        """Chama Ollama API local para gerar c√≥digo"""
        
        try:
            import ollama
            
            response = ollama.generate(
                model=self.evolution_config['llm_model'],
                prompt=prompt,
                options={
                    'temperature': 0.7,
                    'top_p': 0.9,
                    'num_predict': 2000
                }
            )
            
            code = response['response']
            
            # Extrai c√≥digo entre ```python e ```
            if '```python' in code:
                code = code.split('```python')[1].split('```')[0]
            elif '```' in code:
                code = code.split('```')[1].split('```')[0]
            
            return code.strip()
            
        except ImportError:
            logger.warning("Ollama n√£o dispon√≠vel, usando evolu√ß√£o gen√©tica simples")
            return self._genetic_evolution(prompt)
    
    def _genetic_evolution(self, original_code: str) -> str:
        """Fallback: evolu√ß√£o gen√©tica simples se LLM n√£o dispon√≠vel"""
        # Implementa√ß√£o simplificada de muta√ß√£o gen√©tica
        # TODO: Implementar algoritmo gen√©tico completo
        return original_code
    
    def _validate_python_syntax(self, code: str) -> bool:
        """Valida se o c√≥digo Python √© sintaticamente correto"""
        try:
            ast.parse(code)
            return True
        except SyntaxError:
            return False
    
    def _save_variation(self, code: str, variation_num: int) -> str:
        """Salva varia√ß√£o do c√≥digo com timestamp"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"variation_{timestamp}_v{variation_num}.py"
        filepath = os.path.join(self.versions_dir, filename)
        
        with open(filepath, 'w') as f:
            f.write(code)
        
        return filepath
    
    def backtest_variation(self, variation_path: str, historical_data) -> Dict:
        """
        Testa varia√ß√£o em dados hist√≥ricos
        
        Args:
            variation_path: Caminho para arquivo da varia√ß√£o
            historical_data: Dados hist√≥ricos para backtest
            
        Returns:
            M√©tricas de performance
        """
        logger.info(f"üìä Backtesting {os.path.basename(variation_path)}")
        
        # TODO: Implementar backtesting completo
        # Por enquanto, retorna m√©tricas simuladas
        
        import random
        metrics = {
            'accuracy': random.uniform(0.55, 0.85),
            'profit_factor': random.uniform(1.2, 2.5),
            'max_drawdown': random.uniform(0.05, 0.20),
            'total_trades': random.randint(50, 200),
            'win_rate': random.uniform(0.50, 0.75)
        }
        
        logger.info(f"Resultados: Accuracy={metrics['accuracy']:.2%}, PF={metrics['profit_factor']:.2f}")
        
        return metrics
    
    def select_best_variation(self, variations_metrics: List[Dict]) -> Optional[str]:
        """
        Seleciona a melhor varia√ß√£o baseado em m√∫ltiplas m√©tricas
        
        Args:
            variations_metrics: Lista de dicts com 'path' e 'metrics'
            
        Returns:
            Caminho da melhor varia√ß√£o ou None
        """
        if not variations_metrics:
            return None
        
        # Score composto: accuracy * profit_factor * (1 - drawdown)
        best_score = -1
        best_variation = None
        
        for var in variations_metrics:
            metrics = var['metrics']
            score = (
                metrics['accuracy'] * 
                metrics['profit_factor'] * 
                (1 - metrics['max_drawdown'])
            )
            
            if score > best_score:
                best_score = score
                best_variation = var['path']
        
        logger.success(f"üèÜ Melhor varia√ß√£o: {os.path.basename(best_variation)} (score={best_score:.3f})")
        
        return best_variation
    
    def deploy_new_version(self, variation_path: str, target_file: str):
        """
        Substitui c√≥digo atual pela melhor varia√ß√£o
        
        Args:
            variation_path: Caminho da varia√ß√£o vencedora
            target_file: Arquivo a ser substitu√≠do
        """
        # Backup da vers√£o atual
        backup_path = f"{target_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(target_file, backup_path)
        logger.info(f"üíæ Backup criado: {backup_path}")
        
        # Substitui pelo novo c√≥digo
        shutil.copy2(variation_path, target_file)
        logger.success(f"üöÄ Nova vers√£o deployada: {target_file}")
        
        # Atualiza vers√£o no config
        self._increment_version()
    
    def _increment_version(self):
        """Incrementa n√∫mero da vers√£o"""
        parts = self.current_version.split('.')
        parts[-1] = str(int(parts[-1]) + 1)
        new_version = '.'.join(parts)
        
        self.config['system']['version'] = new_version
        
        with open('config.yaml', 'w') as f:
            yaml.dump(self.config, f, default_flow_style=False)
        
        logger.info(f"üìå Vers√£o atualizada: {self.current_version} ‚Üí {new_version}")
        self.current_version = new_version
    
    def evolve(self, target_file: str, current_metrics: Dict, historical_data=None):
        """
        Processo completo de evolu√ß√£o
        
        Args:
            target_file: Arquivo a evoluir
            current_metrics: M√©tricas atuais de performance
            historical_data: Dados para backtest
        """
        logger.info("=" * 60)
        logger.info("üß¨ INICIANDO PROCESSO DE AUTO-EVOLU√á√ÉO")
        logger.info("=" * 60)
        
        # 1. Avalia se precisa evoluir
        if not self.evaluate_performance(current_metrics):
            logger.info("‚úÖ Performance satisfat√≥ria, evolu√ß√£o n√£o necess√°ria")
            return
        
        # 2. Gera varia√ß√µes
        variations = self.generate_code_variations(target_file, num_variations=5)
        
        if not variations:
            logger.error("‚ùå Nenhuma varia√ß√£o v√°lida gerada")
            return
        
        # 3. Testa cada varia√ß√£o
        variations_metrics = []
        for var_path in variations:
            metrics = self.backtest_variation(var_path, historical_data)
            variations_metrics.append({
                'path': var_path,
                'metrics': metrics
            })
        
        # 4. Seleciona melhor
        best_variation = self.select_best_variation(variations_metrics)
        
        if best_variation:
            # 5. Deploy
            self.deploy_new_version(best_variation, target_file)
            logger.success("üéâ Evolu√ß√£o conclu√≠da com sucesso!")
        else:
            logger.warning("‚ö†Ô∏è Nenhuma varia√ß√£o melhor que a atual")
        
        logger.info("=" * 60)


if __name__ == "__main__":
    # Teste do motor de evolu√ß√£o
    engine = SelfEvolutionEngine()
    
    # Simula m√©tricas ruins
    test_metrics = {
        'accuracy': 0.55,
        'profit_factor': 1.2,
        'max_drawdown': 0.18
    }
    
    # Testa evolu√ß√£o (sem arquivo real por enquanto)
    logger.info("üß™ Teste do Self Evolution Engine")
    needs_evolution = engine.evaluate_performance(test_metrics)
    logger.info(f"Precisa evoluir? {needs_evolution}")
